<canvas class="webgl"></canvas>

<style>
  .webgl {
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    position: fixed;
    outline: none;
  }
</style>

<script>

import * as THREE from 'three';
import { OrbitControls  } from 'three/addons/controls/OrbitControls.js';
import GUI from 'lil-gui'
import gsap from 'gsap'

// Debug
const gui = new GUI({
  width: 300,
  title: 'Nice debug UI',
  closeFolders: false,
});
gui.hide();

window.addEventListener('keydown', (event) => {
  if(event.key == 'h')
    gui.show(gui._hidden)
})

const debugObject = {
  color: '#ff0000',
  spin: () => {
    gsap.to(mesh.rotation, { duration: 1, y: mesh.rotation.y + Math.PI * 2 })
  },
  subdivision: 2
};

const canvas = document.querySelector('canvas.webgl') as HTMLCanvasElement;

// Sizes
const scene = new THREE.Scene();

// Object
let geometry = new THREE.BoxGeometry(1, 1, 1 );
const material = new THREE.MeshBasicMaterial({ 
  color: debugObject.color,
  wireframe: true,
});
const mesh = new THREE.Mesh(geometry, material);
scene.add(mesh);

// Debug
const CubeTweaks = gui.addFolder('Awesome cube');
CubeTweaks.add(mesh.position, 'y').min(-3).max(3).step(0.01);
CubeTweaks.add(mesh, 'visible');
CubeTweaks.addColor(debugObject, 'color').onChange(() => {
  material.color.set(debugObject.color);
});
CubeTweaks.add(debugObject, 'spin');
CubeTweaks.add(debugObject, 'subdivision').min(1).max(20).step(1).onFinishChange(() => {
  mesh.geometry.dispose();
  mesh.geometry = new THREE.BoxGeometry(1, 1, 1, debugObject.subdivision, debugObject.subdivision, debugObject.subdivision);
});

// Sizes
const sizes = {
  width: window.innerWidth,
  height: window.innerHeight
}

window.addEventListener('resize', () => {
  sizes.width = window.innerWidth;
  sizes.height = window.innerHeight;

  camera.aspect = sizes.width / sizes.height;
  camera.updateProjectionMatrix();

  renderer.setSize(sizes.width, sizes.height);
  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
});



// Base Camera
const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100);
camera.position.z = 3;
scene.add(camera);


// Controls
const controls = new OrbitControls(camera, canvas);
controls.enableDamping = true;


// Render
const renderer = new THREE.WebGLRenderer({
  canvas: canvas
});
renderer.setSize(sizes.width, sizes.height);


// Animate
const clock = new THREE.Clock();

const tick = () => {
  const elapsedTime = clock.getElapsedTime();

  // Update controls
  controls.update();

  // Render
  renderer.render(scene, camera);

  // Call tick again on the next frame
  window.requestAnimationFrame(tick);
}

tick();

</script>

